# -*- coding: utf-8 -*-
"""IMDB_Movie_Dataset (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10ALy9469mcISxEdqMI_YxDyItlQvIlCe

# Data Analysis of IMDB movies data

Viewing your data
"""

#import panda library
import pandas as pd
#load dataset ,, remove index read
movies_df = pd.read_csv("/content/sample_data/IMDB-Movie-Data.csv")
#view all, view first 10, view last 2
movies_df.head()
movies_df.head(10)

movies_df.tail(2)

""" Getting info about your data"""

movies_df.info()
movies_df.shape

"""Handling duplicates"""

# Use pd.concat instead of movies_df.concat
temp_df = pd.concat([movies_df, movies_df])
display(temp_df.head())

print(temp_df.shape)

temp_df = temp_df.drop_duplicates()
temp_df.shape
temp_df.drop_duplicates(inplace=True)

temp_df = pd.concat([movies_df, movies_df]) # make a new copy
temp_df.drop_duplicates(inplace=True, keep=False)
temp_df.shape

"""Column cleanup"""

movies_df.columns
movies_df.rename(columns={
'Runtime (Minutes)': 'Runtime',
'Revenue (Millions)': 'Revenue_millions' }, inplace=True)
movies_df.columns

movies_df.columns = ['rank','title', 'genre', 'description', 'director',
'actors', 'year', 'runtime',
'rating', 'votes',
'revenue_millions'
,
'metascore']
movies_df.columns = [col.upper() for col in movies_df]
movies_df.columns

movies_df.columns = [col.lower() for col in movies_df]
movies_df.columns

"""How to work with missing values"""

movies_df.isnull()
movies_df.isnull().sum()

#removing null values
movies_df.dropna()
movies_df.dropna(axis=1)

"""Imputation"""

revenue = movies_df ['revenue_millions']
revenue.head()
revenue_mean = revenue.mean()
revenue.fillna(revenue_mean, inplace=True)
movies_df.isnull().sum()

"""Understanding your variables"""

movies_df.describe()

movies_df['genre'].describe()

movies_df['genre'].value_counts().head(10)

movies_df.corr(numeric_only=True)

"""DataFrame slicing, selecting, extracting: By column"""

genre_col = movies_df['genre']
type(genre_col)
#pandas.core.series.Series

subset = movies_df[['genre', 'rating']]
subset.head()

"""DataFrame slicing, selecting, extracting:
By rows
"""

# set the 'title' column as the index
movies_df_indexed = movies_df.set_index('title')

# use .loc with the movie title
prom_loc = movies_df_indexed.loc['Prometheus']
display(prom_loc)

prom = movies_df.iloc[1]
display(prom)

movie_subset = movies_df.loc['Prometheus':'Sing']
movie_subset = movies_df.iloc[1:4]
display(movie_subset)

"""Conditional selections

"""

condition = (movies_df['director'] == "Ridley Scott")
condition.head()

movies_df[movies_df['director'] == "Ridley Scott"]

movies_df[movies_df['rating'] >= 8.6].head(3)

movies_df[(movies_df['director'] == 'Christopher Nolan') | (movies_df['director'] == 'Ridley Scott')].head()

movies_df[movies_df['director'].isin(['Christopher Nolan', 'Ridley Scott'])].head()

movies_df[
((movies_df['year'] >= 2005) & (movies_df['year'] <= 2010))
& (movies_df['rating'] > 8.0)
& (movies_df['revenue_millions'] <
movies_df['revenue_millions'].quantile(0.25)) ]

"""Applying functions"""

def rating_function(x):
  if x >= 8.0:
    return "good"
  else:
    return "bad"
movies_df["rating_category"] = movies_df["rating"].apply(rating_function)
movies_df.head(2)

"""Brief Plotting"""

import matplotlib.pyplot as plt
plt.rcParams.update({'font.size': 20,
'figure.figsize': (10, 8)})
movies_df.plot(kind='scatter', x='rating', y='revenue_millions'
,
title='Revenue (millions) vs Rating');
movies_df['rating'].plot(kind='hist', title='Rating');
movies_df['rating'].plot(kind="box");
movies_df.boxplot(column='revenue_millions'
,
by='rating_category');